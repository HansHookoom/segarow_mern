import mongoose from 'mongoose';
import config from '../config/env.js';
import User from '../models/User.js';
import Log from '../models/Log.js';
import mongoLogService from '../services/mongoLogService.js';

// Fonction pour effectuer un audit de s√©curit√©
async function securityAudit() {
  try {
    console.log('üîí D√©but de l\'audit de s√©curit√©...');
    
    // Connexion √† MongoDB
    await mongoose.connect(config.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');
    
    const auditResults = {
      timestamp: new Date(),
      vulnerabilities: [],
      warnings: [],
      recommendations: []
    };
    
    // 1. V√©rifier les utilisateurs avec des mots de passe faibles
    console.log('\nüë• Audit des utilisateurs...');
    const users = await User.find({}).select('email username role lastLogin isActive');
    
    // V√©rifier les comptes admin
    const adminUsers = users.filter(user => user.role === 'admin');
    if (adminUsers.length === 0) {
      auditResults.vulnerabilities.push('Aucun administrateur trouv√©');
    } else if (adminUsers.length > 3) {
      auditResults.warnings.push(`Trop d'administrateurs (${adminUsers.length})`);
    }
    
    // V√©rifier les comptes inactifs
    const inactiveUsers = users.filter(user => !user.isActive);
    if (inactiveUsers.length > 0) {
      auditResults.warnings.push(`${inactiveUsers.length} comptes d√©sactiv√©s`);
    }
    
    // 2. V√©rifier les tentatives de connexion √©chou√©es
    console.log('üîç Audit des logs de s√©curit√©...');
    const recentFailedLogins = await Log.countDocuments({
      actionType: 'login_failed',
      createdAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } // 24h
    });
    
    if (recentFailedLogins > 10) {
      auditResults.vulnerabilities.push(`${recentFailedLogins} tentatives de connexion √©chou√©es en 24h`);
    }
    
    // 3. V√©rifier les erreurs r√©centes
    const recentErrors = await Log.countDocuments({
      level: 'error',
      createdAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    });
    
    if (recentErrors > 5) {
      auditResults.warnings.push(`${recentErrors} erreurs en 24h`);
    }
    
    // 4. V√©rifier la configuration
    console.log('‚öôÔ∏è Audit de la configuration...');
    
    if (config.NODE_ENV === 'production') {
      if (config.JWT_SECRET === 'votre-secret-jwt-par-defaut-changez-le-en-production') {
        auditResults.vulnerabilities.push('JWT_SECRET par d√©faut en production');
      }
      
      if (!config.EMAIL_USER || !config.EMAIL_PASS) {
        auditResults.warnings.push('Configuration email manquante');
      }
    }
    
    // 5. V√©rifier les sessions expir√©es
    const expiredSessions = await Log.countDocuments({
      actionType: 'session_expired',
      createdAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    });
    
    if (expiredSessions > 0) {
      auditResults.warnings.push(`${expiredSessions} sessions expir√©es en 24h`);
    }
    
    // 6. G√©n√©rer des recommandations
    if (auditResults.vulnerabilities.length === 0) {
      auditResults.recommendations.push('Aucune vuln√©rabilit√© critique d√©tect√©e');
    } else {
      auditResults.recommendations.push('Corriger les vuln√©rabilit√©s identifi√©es');
    }
    
    if (adminUsers.length < 2) {
      auditResults.recommendations.push('Cr√©er un compte administrateur de secours');
    }
    
    auditResults.recommendations.push('V√©rifier r√©guli√®rement les logs de s√©curit√©');
    auditResults.recommendations.push('Mettre √† jour les d√©pendances r√©guli√®rement');
    
    // Afficher les r√©sultats
    console.log('\nüìä R√©sultats de l\'audit de s√©curit√©:');
    console.log('=====================================');
    
    if (auditResults.vulnerabilities.length > 0) {
      console.log('\nüö® VULN√âRABILIT√âS:');
      auditResults.vulnerabilities.forEach(vuln => console.log(`  - ${vuln}`));
    }
    
    if (auditResults.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è AVERTISSEMENTS:');
      auditResults.warnings.forEach(warning => console.log(`  - ${warning}`));
    }
    
    console.log('\nüí° RECOMMANDATIONS:');
    auditResults.recommendations.forEach(rec => console.log(`  - ${rec}`));
    
    // Logger l'audit
    await mongoLogService.info('Audit de s√©curit√© effectu√©', {
      vulnerabilities: auditResults.vulnerabilities.length,
      warnings: auditResults.warnings.length,
      recommendations: auditResults.recommendations.length,
      totalUsers: users.length,
      adminUsers: adminUsers.length,
      inactiveUsers: inactiveUsers.length,
      recentFailedLogins,
      recentErrors
    });
    
    console.log('\n‚úÖ Audit de s√©curit√© termin√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'audit de s√©curit√©:', error);
    
    await mongoLogService.error('Erreur audit de s√©curit√©', {
      error: error.message,
      stack: error.stack
    });
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
}

// Ex√©cuter l'audit si le script est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  securityAudit();
}

export default securityAudit; 